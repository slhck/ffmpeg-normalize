{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ffmpeg-normalize","text":"<p>A utility for batch-normalizing audio using ffmpeg.</p> <p>This program normalizes media files to a certain loudness level using the EBU R128 loudness normalization procedure. It can also perform RMS-based normalization (where the mean is lifted or attenuated), or peak normalization to a certain target level.</p> <p>Batch processing of several input files is possible, including video files.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<ol> <li>Install a recent version of ffmpeg</li> <li>Run <code>pip3 install ffmpeg-normalize</code> and <code>ffmpeg-normalize /path/to/your/file.mp4</code>, alternatively install <code>uv</code> and run <code>uvx ffmpeg-normalize /path/to/your/file.mp4</code></li> <li>Done! \ud83c\udfa7 (the normalized file will be called <code>normalized/file.mkv</code>)</li> </ol>"},{"location":"#features","title":"\u2728 Features","text":"<ul> <li>EBU R128 loudness normalization \u2014 Two-pass by default, with an option for one-pass dynamic normalization</li> <li>RMS-based normalization \u2014 Adjust audio to a specific RMS level</li> <li>Peak normalization \u2014 Adjust audio to a specific peak level</li> <li>Selective audio stream normalization \u2014 Normalize specific audio streams or only default streams</li> <li>Video file support \u2014 Process video files while preserving video streams</li> <li>Docker support \u2014 Run via Docker container</li> <li>Python API \u2014 Use programmatically in your Python projects</li> <li>Shell completions \u2014 Available for bash, zsh, and fish</li> <li>Album Batch normalization \u2013 Process files jointy, preserving relative loudness</li> </ul>"},{"location":"#whats-new","title":"\ud83c\udd95 What's New","text":"<ul> <li> <p>Version 1.35.0 has batch/album normalization with <code>--batch</code>. It preserves relative loudness between files! Perfect for music albums where you want to shift all tracks by the same amount.</p> <p>Example:</p> <pre><code>ffmpeg-normalize album/*.flac --batch -nt rms -t -20\n</code></pre> <p>shifts the entire album so the average RMS is -20 dB, preserving the original relative loudness as mastered.</p> </li> <li> <p>Version 1.34.0 brings selective audio stream normalization! You can now:</p> <ul> <li>Normalize specific audio streams with <code>-as/--audio-streams</code> (e.g., <code>-as 1,2</code> to normalize only streams 1 and 2)</li> <li>Normalize only default audio streams with <code>--audio-default-only</code> (useful for files with multiple language tracks)</li> <li>Keep other streams unchanged with <code>--keep-other-audio</code> (copy non-selected streams without normalization)</li> </ul> <p>Example:</p> <pre><code>ffmpeg-normalize input.mkv -as 1 --keep-other-audio\n</code></pre> <p>normalizes stream 1 and copies all other audio streams unchanged.</p> </li> </ul> <p>Other recent additions:</p> <ul> <li>Shell completions (v1.31.0) \u2014 Tab completion for bash, zsh, and fish shells. See the installation guide for setup instructions.</li> <li><code>--lower-only</code> option \u2014 Prevent audio from increasing in loudness, only lower it if needed (works with all normalization types).</li> </ul> <p>See the full changelog for all updates.</p>"},{"location":"about/changelog/","title":"Changelog","text":"<p>Please see the CHANGELOG.md file for the full changelog.</p>"},{"location":"about/contributing/","title":"Contributing","text":"<p>Thank you for your interest in contributing to ffmpeg-normalize! This guide will help you get started.</p>"},{"location":"about/contributing/#getting-started","title":"Getting Started","text":""},{"location":"about/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or higher</li> <li>FFmpeg installed and available in PATH</li> <li>uv (recommended) or pip</li> </ul>"},{"location":"about/contributing/#setting-up-your-development-environment","title":"Setting Up Your Development Environment","text":"<ol> <li> <p>Fork and clone the repository</p> <pre><code>git clone https://github.com/YOUR-USERNAME/ffmpeg-normalize.git\ncd ffmpeg-normalize\n</code></pre> </li> <li> <p>Install dependencies</p> <p>Using uv (recommended): <pre><code>uv sync --group dev\n</code></pre></p> <p>Or using pip: <pre><code>pip install -e \".[dev]\"\n</code></pre></p> </li> <li> <p>Verify your setup</p> <pre><code># Run tests\nuv run pytest\n\n# Run the tool\nuv run python -m ffmpeg_normalize --help\n</code></pre> </li> </ol>"},{"location":"about/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"about/contributing/#making-changes","title":"Making Changes","text":"<ol> <li> <p>Create a new branch from <code>master</code></p> <pre><code>git checkout -b feature/your-feature-name\n</code></pre> </li> <li> <p>Make your changes following the code style guidelines below</p> </li> <li> <p>Run tests to ensure everything works</p> <pre><code>uv run pytest\n</code></pre> </li> <li> <p>Check code quality</p> <pre><code># Linting\nuv run ruff check .\n\n# Code formatting\nuv run ruff format .\n\n# Type checking\nuv run mypy src/ffmpeg_normalize\n</code></pre> </li> </ol>"},{"location":"about/contributing/#commit-guidelines","title":"Commit Guidelines","text":"<p>We use Conventional Commits for commit messages. Each commit message should follow this format:</p> <pre><code>&lt;type&gt;: &lt;description&gt;\n\n[optional body]\n\n[optional footer]\n</code></pre> <p>Types: - <code>feat:</code> \u2014 New feature - <code>fix:</code> \u2014 Bug fix - <code>docs:</code> \u2014 Documentation changes - <code>test:</code> \u2014 Adding or updating tests - <code>refactor:</code> \u2014 Code refactoring - <code>chore:</code> \u2014 Maintenance tasks</p> <p>Examples: <pre><code>git commit -m \"feat: add selective audio stream normalization\"\ngit commit -m \"fix: apply extra input options to first pass\"\ngit commit -m \"docs: update contributing guide\"\n</code></pre></p>"},{"location":"about/contributing/#submitting-a-pull-request","title":"Submitting a Pull Request","text":"<ol> <li> <p>Push your changes to your fork</p> <pre><code>git push origin feature/your-feature-name\n</code></pre> </li> <li> <p>Create a pull request on GitHub</p> <ul> <li>Provide a clear title and description</li> <li>Reference any related issues</li> <li>Ensure all tests pass</li> <li>Request review from maintainers</li> </ul> </li> </ol>"},{"location":"about/contributing/#code-guidelines","title":"Code Guidelines","text":""},{"location":"about/contributing/#project-structure","title":"Project Structure","text":"<ul> <li><code>src/ffmpeg_normalize/</code> \u2014 Main package directory</li> <li><code>_ffmpeg_normalize.py</code> \u2014 Main orchestration class</li> <li><code>_media_file.py</code> \u2014 Media file representation</li> <li><code>_streams.py</code> \u2014 Stream classes (Audio, Video, Subtitle)</li> <li><code>_cmd_utils.py</code> \u2014 FFmpeg command utilities</li> <li><code>_errors.py</code> \u2014 Custom exceptions</li> <li><code>_logger.py</code> \u2014 Logging configuration</li> <li><code>tests/</code> \u2014 Test files and test media samples</li> <li><code>docs/</code> \u2014 MKdocs documentation source</li> </ul>"},{"location":"about/contributing/#testing","title":"Testing","text":"<ul> <li>Tests use pytest and include actual media files in <code>tests/</code></li> <li>Tests call the CLI directly using <code>python -m ffmpeg_normalize</code> to test the full pipeline</li> <li>Always add tests for new features</li> <li>Ensure existing tests pass before submitting PR</li> </ul>"},{"location":"about/contributing/#code-style","title":"Code Style","text":"<ul> <li>Follow PEP 8 guidelines</li> <li>Use type hints where applicable</li> <li>Run <code>ruff format</code> before committing</li> <li>Ensure <code>mypy</code> passes without errors</li> </ul>"},{"location":"about/contributing/#development-commands-reference","title":"Development Commands Reference","text":""},{"location":"about/contributing/#testing_1","title":"Testing","text":"<pre><code>uv run pytest                              # Run all tests\nuv run pytest tests/test_all.py -v        # Run specific test file\nuv run python -m ffmpeg_normalize [args]  # Test the tool directly\n</code></pre>"},{"location":"about/contributing/#code-quality","title":"Code Quality","text":"<pre><code>uv run ruff check .                # Linting\nuv run ruff format .               # Auto-format code\nuv run mypy src/ffmpeg_normalize   # Type checking\n</code></pre>"},{"location":"about/contributing/#documentation","title":"Documentation","text":"<pre><code>pdoc -d google -o docs-api ./ffmpeg_normalize          # Generate API docs\nuvx --with mkdocs-material mkdocs serve                # Preview docs locally\nuvx --with mkdocs-material mkdocs gh-deploy            # Deploy docs\n</code></pre>"},{"location":"about/contributing/#getting-help","title":"Getting Help","text":"<ul> <li>Check existing issues</li> <li>Create a new issue for bugs or feature requests</li> <li>Join discussions for questions and ideas</li> </ul>"},{"location":"about/contributing/#license","title":"License","text":"<p>By contributing, you agree that your contributions will be licensed under the MIT License.</p>"},{"location":"about/license/","title":"License","text":"<p>The MIT License (MIT)</p> <p>Copyright (c) Werner Robitza</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"advanced/api/","title":"API","text":"<p>This program has a simple API that can be used to integrate it into other Python programs.</p> <p>The API docs are available here.</p>"},{"location":"advanced/faq/","title":"FAQ","text":""},{"location":"advanced/faq/#my-output-file-is-too-large","title":"My output file is too large?","text":"<p>This is because the default output codec is PCM, which is uncompressed. If you want to reduce the file size, you can specify an audio codec with <code>-c:a</code> (e.g., <code>-c:a aac</code> for ffmpeg's built-in AAC encoder), and optionally a bitrate with <code>-b:a</code>.</p> <p>For example:</p> <pre><code>ffmpeg-normalize input.wav -o output.m4a -c:a aac -b:a 192k\n</code></pre>"},{"location":"advanced/faq/#what-options-should-i-choose-for-the-ebu-r128-filter-what-is-linear-and-dynamic-mode","title":"What options should I choose for the EBU R128 filter? What is linear and dynamic mode?","text":"<p>EBU R128 is a method for normalizing audio loudness across different tracks or programs. It works by analyzing the audio content and adjusting it to meet specific loudness targets. The main components are:</p> <ul> <li>Integrated Loudness (I): The overall loudness of the entire audio.</li> <li>Loudness Range (LRA): The variation in loudness over time.</li> <li>True Peak (TP): The maximum level of the audio signal.</li> </ul> <p>The normalization process involves measuring these values (input) and then applying gain adjustments to meet target levels (output), typically -23 LUFS for integrated loudness. You can also specify a target loudness range (LRA) and true peak level (TP).</p> <p>Linear mode applies a constant gain adjustment across the entire audio file. This is generally preferred because:</p> <ul> <li>It preserves the original dynamic range of the audio.</li> <li>It maintains the relative loudness between different parts of the audio.</li> <li>It avoids potential artifacts or pumping effects that can occur with dynamic processing.</li> </ul> <p>Dynamic mode, on the other hand, can change the volume dynamically throughout the file. While this can achieve more consistent loudness, it may alter the original artistic intent. There were some bugs in older versions of the <code>loudnorm</code> filter that could cause artifacts, but these have been fixed in recent versions of ffmpeg.</p> <p>For most cases, linear mode is recommended. Dynamic mode should only be used when linear mode is not suitable or when a specific effect is desired. In some cases, <code>loudnorm</code> will still fall back to dynamic mode, and a warning will be printed to the console. Here's when this can happen:</p> <ul> <li> <p>When the input loudness range (LRA) is larger than the target loudness range: If the input file has a loudness range that exceeds the specified loudness range target, the loudnorm filter will automatically switch to dynamic mode. This is because linear normalization alone cannot reduce the loudness range without dynamic processing (limiting). The <code>--keep-loudness-range-target</code> option can be used to keep the input loudness range target above the specified target.</p> </li> <li> <p>When the required gain adjustment to meet the integrated loudness target would result in the true peak exceeding the specified true peak limit. This is because linear processing alone cannot reduce peaks without affecting the entire signal. For example, if a file needs to be amplified by 6 dB to reach the target integrated loudness, but doing so would push the true peak above the specified limit, the filter might switch to dynamic mode to handle this situation. If your content allows for it, you can increase the true peak target to give more headroom for linear processing. If you're consistently running into true peak issues, you might also consider lowering your target integrated loudness level.</p> </li> </ul> <p>At this time, the <code>loudnorm</code> filter in ffmpeg does not provide a way to force linear mode when the input loudness range exceeds the target or when the true peak would be exceeded. There are some options to mitigate this:</p> <ul> <li>The <code>--keep-lra-above-loudness-range-target</code> option can be used to keep the input loudness range above the specified target, but it will not force linear mode in all cases.</li> <li>Similarly, the <code>--keep-loudness-range-target</code> option can be used to keep the input loudness range target.</li> <li>The <code>--lower-only</code> option can be used to skip the normalization pass completely if the measured loudness is lower than the target loudness.</li> </ul> <p>If instead you want to use dynamic mode, you can use the <code>--dynamic</code> option; this will also speed up the normalization process because only one pass is needed.</p>"},{"location":"advanced/faq/#the-program-doesnt-work-because-the-loudnorm-filter-cant-be-found","title":"The program doesn't work because the \"loudnorm\" filter can't be found","text":"<p>Make sure you run a recent ffmpeg version and that <code>loudnorm</code> is part of the output when you run <code>ffmpeg -filters</code>. Many distributions package outdated ffmpeg versions, or (even worse), Libav's <code>ffmpeg</code> disguising as a real <code>ffmpeg</code> from the FFmpeg project.</p> <p>Some ffmpeg builds also do not have the <code>loudnorm</code> filter enabled.</p> <p>You can always download a static build from their website and use that.</p> <p>If you have to use an outdated ffmpeg version, you can only use <code>rms</code> or <code>peak</code> as normalization types, but I can't promise that the program will work correctly.</p>"},{"location":"advanced/faq/#should-i-use-this-to-normalize-my-music-collection","title":"Should I use this to normalize my music collection?","text":"<p>You can use the <code>--replaygain</code> option to write ReplayGain tags to the original file without normalizing. This makes most music players understand the loudness difference and adjust the volume accordingly.</p> <p>If you decide to run <code>ffmpeg-normalize</code> with the default options, it will encode the audio with PCM audio (the default), and the resulting files will be very large. You can also choose to re-encode the files with MP3 or AAC, but you will inevitably introduce generation loss. Therefore, I do not recommend running this kind of destructive operation on your precious music collection, unless you have a backup of the originals or accept potential quality reduction.</p>"},{"location":"advanced/faq/#how-do-i-normalize-an-album-while-preserving-relative-loudness-between-tracks","title":"How do I normalize an album while preserving relative loudness between tracks?","text":"<p>Use the <code>--batch</code> flag with RMS or Peak normalization:</p> <pre><code># Recommended: RMS-based album normalization\nffmpeg-normalize album/*.flac --batch -nt rms -t -20 -c:a flac\n\n# Or peak-based album normalization\nffmpeg-normalize album/*.wav --batch -nt peak -t -1 -c:a pcm_s16le\n</code></pre> <p>Why RMS or Peak? Why not EBU?</p> <p>Album normalization means shifting all tracks by the same gain amount \u2013 just like turning up or down the volume. Music albums are already mastered with the correct relative loudness between tracks, so you want to preserve this exactly. While EBU batch mode works, it's not recommended for albums because EBU normalization applies different processing to each track based on its perceived loudness characteristics. See the discussion here for details.</p> <p>How it works (RMS/Peak):</p> <ol> <li>Analyze all files (first pass)</li> <li>Calculate average RMS or peak across all tracks</li> <li>Compute a single gain adjustment needed to reach the target</li> <li>Apply the same adjustment to all tracks</li> </ol> <p>For example:</p> <ul> <li>Album's average RMS: -26 dB</li> <li>Target: -20 dB</li> <li>Result: +6 dB applied to all tracks equally</li> </ul> <p>See more details and best practices in the examples section.</p>"},{"location":"advanced/faq/#why-are-my-output-files-mkv","title":"Why are my output files MKV?","text":"<p>I chose MKV as a default output container since it handles almost every possible combination of audio, video, and subtitle codecs. If you know which audio/video codec you want, and which container is supported, use the output options to specify the encoder and output file name manually.</p>"},{"location":"advanced/faq/#i-get-a-could-not-write-header-for-output-file-error","title":"I get a \"Could not write header for output file\" error","text":"<p>See the next section.</p>"},{"location":"advanced/faq/#the-conversion-does-not-work-and-i-get-a-cryptic-ffmpeg-error","title":"The conversion does not work and I get a cryptic ffmpeg error!","text":"<p>Maybe ffmpeg says something like:</p> <p>Could not write header for output file #0 (incorrect codec parameters ?): Invalid argument</p> <p>Or the program says:</p> <p>\u2026 Please choose a suitable audio codec with the <code>-c:a</code> option.</p> <p>One possible reason is that the input file contains some streams that cannot be mapped to the output file, or that you are using a codec that does not work for the output file. Examples:</p> <ul> <li> <p>You are trying to normalize a movie file, writing to a <code>.wav</code> or <code>.mp3</code> file. WAV/MP3 files only support audio, not video. Disable video and subtitles with <code>-vn</code> and <code>-sn</code>, or choose a container that supports video (e.g. <code>.mkv</code>).</p> </li> <li> <p>You are trying to normalize a file, writing to an <code>.mp4</code> container. This program defaults to PCM audio, but MP4 does not support PCM audio. Make sure that your audio codec is set to something MP4 containers support (e.g. <code>-c:a aac</code>).</p> </li> </ul> <p>The default output container is <code>.mkv</code> as it will support most input stream types. If you want a different output container, make sure that it supports your input file's video, audio, and subtitle streams (if any).</p> <p>Also, if there is some other broken metadata, you can try to disable copying over of metadata with <code>-mn</code>.</p> <p>Finally, make sure you use a recent version of ffmpeg. The static builds are usually the best option.</p>"},{"location":"advanced/faq/#what-are-the-different-normalization-algorithms","title":"What are the different normalization algorithms?","text":"<ul> <li> <p>EBU R128 is an EBU standard that is commonly used in the broadcasting world. The normalization is performed using a psychoacoustic model that targets a subjective loudness level measured in LUFS (Loudness Unit Full Scale). R128 is subjectively more accurate than any peak or RMS-based normalization. More info on R128 can be found in the official document and the <code>loudnorm</code> filter description by its original author.</p> </li> <li> <p>Peak Normalization analyzes the peak signal level in dBFS and increases the volume of the input signal such that the maximum in the output is 0 dB (or any other chosen threshold). Since spikes in the signal can cause high volume peaks, peak normalization might still result in files that are subjectively quieter than other, non-peak-normalized files.</p> </li> <li> <p>RMS-based Normalization analyzes the RMS power of the signal and changes the volume such that a new RMS target is reached. Otherwise it works similar to peak normalization.</p> </li> </ul>"},{"location":"advanced/faq/#couldnt-i-just-run-loudnorm-with-ffmpeg","title":"Couldn't I just run <code>loudnorm</code> with ffmpeg?","text":"<p>You absolutely can. However, you can get better accuracy and linear normalization with two passes of the filter. Since ffmpeg does not allow you to automatically run these two passes, you have to do it yourself and parse the output values from the first run.</p> <p>If ffmpeg-normalize is too over-engineered for you, you could also use an approach such as featured in this Ruby script that performs the two <code>loudnorm</code> passes.</p> <p>If you want dynamic normalization (the loudnorm default), simply use ffmpeg with one pass, e.g.:</p> <pre><code>ffmpeg -i input.mp3 -af loudnorm -c:a aac -b:a 192k output.m4a\n</code></pre>"},{"location":"advanced/faq/#what-about-speech","title":"What about speech?","text":"<p>You should check out the <code>speechnorm</code> filter that is part of ffmpeg. It is a designed to be used in one pass, so you don't need this script at all.</p> <p>See the documentation for more information.</p>"},{"location":"advanced/faq/#after-updating-this-program-does-not-work-as-expected-anymore","title":"After updating, this program does not work as expected anymore!","text":"<p>You are probably using a 0.x version of this program. There are significant changes to the command line arguments and inner workings of this program, so please  adapt your scripts to the new one. Those changes were necessary to address a few issues that kept piling up; leaving the program as-is would have made it hard to extend it. You can continue using the old version (find it under Releases on GitHub or request the specific version from PyPi), but it will not be supported anymore.</p>"},{"location":"advanced/faq/#can-i-buy-you-a-beer-coffee-random-drink","title":"Can I buy you a beer / coffee / random drink?","text":"<p>If you found this program useful and feel like giving back, feel free to send a donation via PayPal.</p>"},{"location":"getting-started/docker/","title":"Docker Usage","text":"<p>You can use the pre-built image from Docker Hub:</p> <pre><code>docker run -v \"$(pwd):/tmp\" -it slhck/ffmpeg-normalize\n</code></pre> <p>Alternatively, download this repository and run</p> <pre><code>docker build -t ffmpeg-normalize .\n</code></pre> <p>Then run the container with:</p> <pre><code>docker run  -v \"$(pwd):/tmp\" -it ffmpeg-normalize\n</code></pre> <p>This will mount your current directory to the <code>/tmp</code> directory inside the container. Everything else works the same way as if you had installed the program locally. For example, to normalize a file:</p> <pre><code>docker run  -v \"$(pwd):/tmp\" -it ffmpeg-normalize /tmp/yourfile.mp4 -o /tmp/yourfile-normalized.wav\n</code></pre> <p>You will then find the normalized file in your current directory.</p>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#via-uv-recommended","title":"Via <code>uv</code> (recommended)","text":"<p>Install <code>uv</code> from their website.</p> <p>Then run:</p> <pre><code>uvx ffmpeg-normalize\n</code></pre> <p>That's it.</p>"},{"location":"getting-started/installation/#via-pipx","title":"Via <code>pipx</code>","text":"<p>Install <code>pipx</code> from their website.</p> <p>Then run:</p> <pre><code>pipx install ffmpeg-normalize\n</code></pre>"},{"location":"getting-started/installation/#via-pip","title":"Via <code>pip</code>","text":"<p>For Python 3 and pip:</p> <pre><code>pip3 install --user ffmpeg-normalize\n</code></pre> <p>To later upgrade to the latest version, run <code>pip3 install --upgrade --user ffmpeg-normalize</code>.</p>"},{"location":"getting-started/installation/#shell-completions","title":"Shell Completions","text":"<p>This tool provides shell completions for bash and zsh. To install them:</p>"},{"location":"getting-started/installation/#bash","title":"Bash","text":"<p>If you have <code>bash-completion</code> installed, you can just copy your new completion script to the <code>/usr/local/etc/bash_completion.d</code> directory.</p> <pre><code>curl -L https://raw.githubusercontent.com/slhck/ffmpeg-normalize/master/completions/ffmpeg-normalize.bash \\\n  -o /usr/local/etc/bash_completion.d/ffmpeg-normalize\n</code></pre> <p>Without bash-completion, you can manually install the completion script:</p> <pre><code># create completions directory if it doesn't exist\nmkdir -p ~/.bash_completions.d\n\n# download and install completion script\ncurl -L https://raw.githubusercontent.com/slhck/ffmpeg-normalize/master/completions/ffmpeg-normalize.bash \\\n  -o ~/.bash_completions.d/ffmpeg-normalize\n\n# source it in your ~/.bashrc\necho 'source ~/.bash_completions.d/ffmpeg-normalize' &gt;&gt; ~/.bashrc\n</code></pre>"},{"location":"getting-started/installation/#zsh","title":"Zsh","text":"<p>Download the completion script and place it in the default <code>site-functions</code> directory:</p> <pre><code>curl -L https://raw.githubusercontent.com/slhck/ffmpeg-normalize/master/completions/ffmpeg-normalize.zsh \\\n  -o /usr/local/share/zsh/site-functions/\n</code></pre> <p>You may choose any other directory that is in your <code>$FPATH</code> variable. Make sure your <code>.zshrc</code> file contains <code>autoload -Uz compinit &amp;&amp; compinit</code>.</p>"},{"location":"getting-started/requirements/","title":"Requirements","text":"<p>You need Python 3.9 or higher, and ffmpeg.</p>"},{"location":"getting-started/requirements/#ffmpeg","title":"ffmpeg","text":"<ul> <li>ffmpeg 7.x is recommended, although it works with 5.x and above (these may contain already solved bugs with regard to loudness normalization)</li> <li>Download a static build for your system</li> <li>Place the <code>ffmpeg</code> executable in your <code>$PATH</code>, or specify the path to the binary with the <code>FFMPEG_PATH</code> environment variable in <code>ffmpeg-normalize</code></li> </ul>"},{"location":"getting-started/requirements/#installation-examples","title":"Installation Examples","text":""},{"location":"getting-started/requirements/#linux","title":"Linux","text":"<p>You can use the static build from johnvansickle.com:</p> <pre><code>wget https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz\nmkdir -p ffmpeg\ntar -xf ffmpeg-release-amd64-static.tar.xz -C ffmpeg --strip-components=1\nsudo cp ffmpeg/ffmpeg /usr/local/bin\nsudo cp ffmpeg/ffprobe /usr/local/bin\nsudo chmod +x /usr/local/bin/ffmpeg /usr/local/bin/ffprobe\n</code></pre> <p>Note</p> <p>Using distribution packages (e.g., <code>apt install ffmpeg</code>) is not recommended, as these are often outdated.</p>"},{"location":"getting-started/requirements/#windows","title":"Windows","text":"<p>Follow this guide.</p>"},{"location":"getting-started/requirements/#macos-and-linux-homebrew","title":"macOS and Linux (Homebrew)","text":"<p>You can use Homebrew to install ffmpeg:</p> <pre><code>brew install ffmpeg\n</code></pre> <p>However, this might install a lot of dependencies and take some time. If you don't want to use Homebrew, you can use a static build from evermeet.cx.</p>"},{"location":"usage/basic/","title":"Basic Usage","text":"<p>Supply one or more input files, and optionally, output file names:</p> <pre><code>ffmpeg-normalize input [input ...][-h][-o OUTPUT [OUTPUT ...]] [options]\n</code></pre> <p>A very simple normalization command looks like this:</p> <pre><code>ffmpeg-normalize input.mp3\n</code></pre> <p>This creates <code>normalized/input.mkv</code> with EBU R128 normalization (target: -23 LUFS) using PCM audio.</p> <p>You can customize the normalization and output format with various options, as described below.</p> <pre><code>ffmpeg-normalize input.mp3 -c:a aac -b:a 192k\n</code></pre> <p>This uses the AAC codec at 192 kbps bitrate instead of PCM to keep file size manageable.</p> <p>To process multiple files, just list them all as input using wildcards (Linux):</p> <pre><code>ffmpeg-normalize *.mp3 -c:a libmp3lame -b:a 320k -ext mp3\n</code></pre> <p>This normalizes all MP3 files in the current directory, outputs as MP3 at 320 kbps.</p> <p>For the complete list of options, run <code>ffmpeg-normalize -h</code> or read the detailed options page. You can also find more examples in the examples page.</p>"},{"location":"usage/examples/","title":"Examples","text":""},{"location":"usage/examples/#file-inputoutput","title":"File Input/Output","text":""},{"location":"usage/examples/#normalize-multiple-files","title":"Normalize multiple files","text":"<p>Normalize two WAV files and write them to the specified output files with uncompressed PCM WAV as audio codec:</p> <pre><code>ffmpeg-normalize file1.wav file2.wav -o file1-normalized.wav file2-normalized.wav\n</code></pre>"},{"location":"usage/examples/#overwrite-the-input-file","title":"Overwrite the input file","text":"<p>You can (if you really need to!) also overwrite your input file. Warning, this will destroy data:</p> <pre><code>ffmpeg-normalize input.mp4 -o input.mp4 -f\n</code></pre>"},{"location":"usage/examples/#normalize-videos-compress-audio","title":"Normalize videos, compress audio","text":"<p>Normalize a number of videos in the current folder and write them to a folder called <code>normalized</code>, converting all audio streams to AAC with 192 kBit/s.</p> <pre><code>ffmpeg-normalize *.mkv -c:a aac -b:a 192k\n</code></pre>"},{"location":"usage/examples/#use-windows-loops-for-multiple-files","title":"Use Windows loops for multiple files","text":"<p>For Windows CMD (Batch), the above would be written as a loop:</p> <pre><code>for %i in (*.mkv) do ffmpeg-normalize \"%i\" -c:a aac -b:a 192k\n</code></pre> <p>With PowerShell:</p> <pre><code>ls *.mkv | ForEach-Object { ffmpeg-normalize $_.FullName -c:a aac -b:a 192k }\n</code></pre>"},{"location":"usage/examples/#create-an-mp3-file-as-output","title":"Create an MP3 file as output","text":"<p>Normalize an MP3 file and write an MP3 file (you have to explicitly specify the encoder):</p> <pre><code>ffmpeg-normalize input.mp3 -c:a libmp3lame -b:a 320k -o output.mp3\n</code></pre>"},{"location":"usage/examples/#change-the-output-container-from-the-default-mkv","title":"Change the output container from the default (MKV)","text":"<p>Normalize many files, keeping PCM audio, but choosing a different container:</p> <pre><code>ffmpeg-normalize *.wav -c:a pcm_s16le -ext aif\n</code></pre>"},{"location":"usage/examples/#normalization-options","title":"Normalization Options","text":""},{"location":"usage/examples/#perform-peak-normalization","title":"Perform peak normalization","text":"<p>Instead of EBU R128, one might just want to use simple peak normalization to 0 dB:</p> <pre><code>ffmpeg-normalize test.wav --normalization-type peak --target-level 0 --output normalized.wav\nffmpeg-normalize test.wav -nt peak -t 0 -o normalized.wav\n</code></pre>"},{"location":"usage/examples/#extra-options","title":"Extra options","text":"<p>If you need some fancy extra options, such as setting <code>vbr</code> for the <code>libfdk_aac</code> encoder, pass them to the <code>-e</code>/<code>--extra-options</code> argument:</p> <pre><code>ffmpeg-normalize input.m4a -c:a libfdk_aac -e='-vbr 3' -o output.m4a\n</code></pre>"},{"location":"usage/examples/#check-the-loudness-statistics","title":"Check the loudness statistics","text":"<p>You can check the statistics of a file to verify the levels with <code>-p</code>. Pass <code>-n</code> to avoid running the normalization:</p> <pre><code>ffmpeg-normalize test/test.wav -p -n -f\n</code></pre> <p>This will return a valid JSON object:</p> <pre><code>[\n{\n    \"input_file\": \"test/test.wav\",\n    \"output_file\": \"normalized/test.mkv\",\n    \"stream_id\": 0,\n    \"ebu\": {\n        \"input_i\": -39.77,\n        \"input_tp\": -27.49,\n        \"input_lra\": 2.1,\n        \"input_thresh\": -49.82,\n        \"output_i\": -22.15,\n        \"output_tp\": -9.46,\n        \"output_lra\": 2.1,\n        \"output_thresh\": -32.24,\n        \"normalization_type\": \"dynamic\",\n        \"target_offset\": -0.85\n    },\n    \"mean\": null,\n    \"max\": null\n}\n]\n</code></pre>"},{"location":"usage/examples/#changing-the-loudness-range","title":"Changing the loudness range","text":"<p>By specifying a different loudness range target (<code>-lrt</code>), you can change the dynamics of the EBU R128 normalization. For more info about loudness range, see this page.</p> <p>The default is 7, but by setting a lower value, you can \"squeeze\" the signal more:</p> <pre><code>ffmpeg-normalize test/test.wav -lrt 1\n</code></pre>"},{"location":"usage/examples/#albumbatch-normalization","title":"Album/Batch Normalization","text":"<p>When normalizing an album or collection of tracks, you typically want to shift all files by the same amount rather than normalizing each file independently. This is where batch mode comes in.</p> <pre><code># Recommended: RMS-based album normalization\n# Shifts entire album to average RMS of -20 dB\nffmpeg-normalize album/*.flac --batch -nt rms -t -20 -c:a flac\n\n# Or peak-based album normalization\n# Shifts entire album so average peak is at -1 dB\nffmpeg-normalize album/*.wav --batch -nt peak -t -1 -c:a pcm_s16le\n</code></pre> <p>Best practices for album normalization:</p> <ul> <li>Use RMS (<code>-nt rms</code>) for most music albums</li> <li>Use Peak (<code>-nt peak</code>) if you want to avoid any clipping</li> <li>Set a reasonable target level (e.g., <code>-t -20</code> for RMS, <code>-t -1</code> for peak)</li> <li>Use lossless codecs (FLAC, WAV) to preserve quality</li> </ul> <p>What about clipping?</p> <p>When using RMS batch normalization, the same gain adjustment is applied to all tracks. This means some tracks might clip if they have higher peaks than average.</p> <p>For example:</p> <ul> <li>Album average RMS: -26 dB</li> <li>Target RMS: -20 dB</li> <li>Adjustment needed: +6 dB (applied to all tracks)</li> <li>Track A has peak at -1 dB \u2192 after +6 dB = +5 dB \u2192 \u26a0\ufe0f Clipping!</li> <li>Track B has peak at -8 dB \u2192 after +6 dB = -2 dB \u2192 \u2705 No clipping</li> </ul> <p>The program will warn you for each track that will clip:</p> <p><code>WARNING: Adjusting will lead to clipping of 5.0 dB</code></p> <p>There are different strategies to deal with this:</p> <ol> <li>Use Peak normalization instead \u2013 guarantees no clipping:</li> </ol> <pre><code>ffmpeg-normalize album/*.flac --batch -nt peak -t -1 -c:a flac\n</code></pre> <ol> <li>Use a more conservative RMS target \u2013 leave more headroom:</li> </ol> <pre><code>ffmpeg-normalize album/*.flac --batch -nt rms -t -23 -c:a flac  # More conservative\n</code></pre> <ol> <li> <p>Accept minor clipping \u2013 if clipping is &lt; 0.5 dB, it may be inaudible in most cases</p> </li> <li> <p>Pre-process with a limiter \u2013 use <code>--pre-filter</code> to apply limiting before normalization:</p> </li> </ol> <pre><code>ffmpeg-normalize album/*.flac --batch -nt rms -t -20 -prf \"alimiter=limit=0.99\" -c:a flac\n</code></pre>"},{"location":"usage/examples/#filters","title":"Filters","text":""},{"location":"usage/examples/#dynamic-normalization","title":"Dynamic normalization","text":"<p>You can use pre-filters to modify the audio signal before or after it is normalized, e.g. by using dynamic compression. This smooths out any volume differences in the signal.</p> <p>Examples for low, mid, and high dydnamic compression:</p> <pre><code>ffmpeg-normalize test.wav -prf \"dynaudnorm=p=0.9:s=0\"\nffmpeg-normalize test.wav -prf \"dynaudnorm=p=0.5:s=5\"\nffmpeg-normalize test.wav -prf \"dynaudnorm=p=0.3:s=15\"\n</code></pre>"},{"location":"usage/examples/#denoising","title":"Denoising","text":"<p>Apply a denoiser, e.g. <code>anlmdn</code>. This removes background white noise, for example.</p> <p>Examples for low, mid, and high denoising:</p> <pre><code>ffmpeg-normalize test.wav -prf \"anlmdn=s=0.0001:p=0.1:m=15\"\nffmpeg-normalize test.wav -prf \"anlmdn=s=0.0001:p=0.01:m=15\"\nffmpeg-normalize test.wav -prf \"anlmdn=s=0.001:p=0.01:m=15\"\n</code></pre> <p>You can combine this with dynamic audio compression, of course:</p> <pre><code>ffmpeg-normalize test.wav -prf \"anlmdn=s=0.001:p=0.01:m=15,dynaudnorm=p=0.3:s=15\"\n</code></pre>"},{"location":"usage/examples/#high-pass-filtering","title":"High-pass filtering","text":"<p>Remove low rumbling noise:</p> <pre><code>ffmpeg-normalize test.wav -prf \"highpass=f=100\"\n</code></pre>"},{"location":"usage/high-level-introduction/","title":"High-Level Introduction","text":""},{"location":"usage/high-level-introduction/#what-does-the-program-do","title":"What does the program do?","text":"<p>The program takes one or more input files and, by default, writes them to a folder called <code>normalized</code>, using an <code>.mkv</code> container. The reason for choosing the MKV container is that it can handle almost any codec combination without any additional configuration.</p> <p>All audio streams will be normalized so that they have the same (perceived) volume according to the EBU R128 standard. This is done by analyzing the audio streams and applying a filter to bring them to a target level. This ensures that multiple files normalized with this filter will have the same perceived loudness.</p> <p>Under the hood, the <code>ffmpeg-normalize</code> program uses ffmpeg's <code>loudnorm</code> filter to do this; the filter was originally written by Kyle Swanson.</p>"},{"location":"usage/high-level-introduction/#how-do-i-specify-the-input","title":"How do I specify the input?","text":"<p>Just give the program one or more input files as arguments. It works with most media files, including video files:</p> <pre><code>ffmpeg-normalize input1.mp3\n</code></pre> <p>This will create a file called <code>normalized/input1.mkv</code> in the current directory.</p>"},{"location":"usage/high-level-introduction/#what-codec-is-chosen","title":"What codec is chosen?","text":"<p>The default audio encoding method is uncompressed PCM (<code>pcm_s16le</code>) to avoid introducing compression artifacts.</p> <p>Note</p> <p>This default keeps the quality high, but will result in a much higher bitrate than you might want, for example if your input files are MP3s, and now your output is much larger.</p> <p>If you want to keep the file size down, use <code>-c:a</code> and specify an audio codec (e.g., <code>-c:a aac</code> for ffmpeg's built-in AAC encoder):</p> <pre><code>ffmpeg-normalize input1.mp3 -c:a aac\n</code></pre> <p>This will create a file called <code>normalized/input1.mkv</code> in the current directory, now using the AAC codec.</p>"},{"location":"usage/high-level-introduction/#how-do-i-specify-the-output-file-name-or-extension","title":"How do I specify the output file name or extension?","text":"<p>You don't have to specify an output file name (the default is <code>normalized/&lt;input&gt;.mkv</code>), but if you want to override it, you can specify one output file name for each input file with the <code>-o</code> option. In this case, the container format (e.g. <code>.wav</code>) will be inferred from the file name extension that you've given.</p> <p>Example:</p> <pre><code>ffmpeg-normalize 1.wav 2.wav -o 1-normalized.wav 2-normalized.wav\n</code></pre> <p>Using the <code>-ext</code> option, you can supply a different output extension common to all output files, e.g. <code>-ext m4a</code>. Example:</p> <pre><code>ffmpeg-normalize input.mp3 -c:a aac -ext m4a\n</code></pre> <p>This will create a file called <code>normalized/input.m4a</code>.</p> <p>Warning</p> <p>You need to make sure that the container supports the codecs used for the output. For example, you cannot place AAC audio in a WAV container.</p>"},{"location":"usage/high-level-introduction/#what-will-get-normalized","title":"What will get normalized?","text":"<p>By default, all streams from the input file will be written to the output file. For example, if your input is a video with two language tracks and a subtitle track, both audio tracks will be normalized independently. Any video and subtitle tracks will be copied over to the output file.</p> <p>You additionally have several options for controlling which audio streams get normalized. By default, all audio streams are normalized:</p> <pre><code>ffmpeg-normalize input.mkv\n</code></pre> <p>Use <code>-as/--audio-streams</code> to select specific streams by their index (comma-separated):</p> <pre><code># Normalize only stream 1\nffmpeg-normalize input.mkv -as 1\n\n# Normalize streams 1 and 2\nffmpeg-normalize input.mkv -as 1,2\n</code></pre> <p>Tip</p> <p>You can use <code>ffmpeg -i input.mkv</code> to see all streams and their indices before normalizing.</p> <p>Use <code>--audio-default-only</code> to normalize only streams marked with the \"default\" disposition (useful for files with multiple language tracks where you only want to normalize the main track):</p> <pre><code>ffmpeg-normalize input.mkv --audio-default-only\n</code></pre> <p>By default, if you select specific streams, only those streams will be in the output. Use <code>--keep-other-audio</code> to copy all other audio streams unchanged:</p> <pre><code># Normalize stream 1, keep all other audio streams as-is\nffmpeg-normalize input.mkv -as 1 --keep-other-audio\n</code></pre>"},{"location":"usage/options/","title":"Detailed Options","text":""},{"location":"usage/options/#file-inputoutput","title":"File Input/Output","text":""},{"location":"usage/options/#input","title":"<code>input</code>","text":"<p>Input media file(s)</p>"},{"location":"usage/options/#-input-list-input_list","title":"<code>--input-list INPUT_LIST</code>","text":"<p>Path to a text file containing a line-separated list of input files.</p> <p>Example: <code>ffmpeg-normalize --input-list input.txt</code></p>"},{"location":"usage/options/#-o-output-output-output-output-output","title":"<code>-o OUTPUT [OUTPUT ...], --output OUTPUT [OUTPUT ...]</code>","text":"<p>Output file names.</p> <p>Will be applied per input file.</p> <p>If no output file name is specified for an input file, the output files will be written to the default output folder with the name <code>&lt;input&gt;.&lt;ext&gt;</code>, where <code>&lt;ext&gt;</code> is the output extension (see <code>-ext</code> option).</p> <p>Example: <code>ffmpeg-normalize 1.wav 2.wav -o 1n.wav 2n.wav</code></p>"},{"location":"usage/options/#-of-output_folder-output-folder-output_folder","title":"<code>-of OUTPUT_FOLDER, --output-folder OUTPUT_FOLDER</code>","text":"<p>Output folder (default: <code>normalized</code>)</p> <p>This folder will be used for input files that have no explicit output name specified.</p>"},{"location":"usage/options/#general","title":"General","text":""},{"location":"usage/options/#-f-force","title":"<code>-f, --force</code>","text":"<p>Force overwrite existing files</p>"},{"location":"usage/options/#-d-debug","title":"<code>-d, --debug</code>","text":"<p>Print debugging output</p>"},{"location":"usage/options/#-v-verbose","title":"<code>-v, --verbose</code>","text":"<p>Print verbose output</p>"},{"location":"usage/options/#-q-quiet","title":"<code>-q, --quiet</code>","text":"<p>Only print errors</p>"},{"location":"usage/options/#-n-dry-run","title":"<code>-n, --dry-run</code>","text":"<p>Do not run normalization, only print what would be done</p>"},{"location":"usage/options/#-pr-progress","title":"<code>-pr</code>, <code>--progress</code>","text":"<p>Show progress bar for files and streams</p>"},{"location":"usage/options/#-version","title":"<code>--version</code>","text":"<p>Print version and exit</p>"},{"location":"usage/options/#normalization","title":"Normalization","text":""},{"location":"usage/options/#-nt-eburmspeak-normalization-type-eburmspeak","title":"<code>-nt {ebu,rms,peak}, --normalization-type {ebu,rms,peak}</code>","text":"<p>Normalization type (default: <code>ebu</code>).</p> <p>EBU normalization performs two passes and normalizes according to EBU R128.</p> <p>RMS-based normalization brings the input file to the specified RMS level.</p> <p>Peak normalization brings the signal to the specified peak level.</p>"},{"location":"usage/options/#-t-target_level-target-level-target_level","title":"<code>-t TARGET_LEVEL, --target-level TARGET_LEVEL</code>","text":"<p>Normalization target level in dB/LUFS (default: -23).</p> <p>For EBU normalization, it corresponds to Integrated Loudness Target in LUFS. The range is -70.0 - -5.0.</p> <p>Otherwise, the range is -99 to 0.</p>"},{"location":"usage/options/#-p-print-stats","title":"<code>-p, --print-stats</code>","text":"<p>Print loudness statistics for both passes formatted as JSON to stdout.</p>"},{"location":"usage/options/#-replaygain","title":"<code>--replaygain</code>","text":"<p>Write ReplayGain tags to the original file without normalizing.</p> <p>This mode will overwrite the input file and ignore other options.</p> <p>Only works with EBU normalization, and only with .mp3, .mp4/.m4a, .ogg, .opus for now.</p>"},{"location":"usage/options/#-batch","title":"<code>--batch</code>","text":"<p>Preserve relative loudness between files (album mode).</p> <p>When operating on a group of unrelated files, you usually want all of them at the same level. However, a group of music files all from the same album is generally meant to be listened to at the relative volumes they were recorded at. In batch mode, all the specified files are considered to be part of a single album and their relative volumes are preserved. This is done by averaging the loudness of all the files, computing a single adjustment from that, and applying a relative adjustment to all the files.</p> <p>Batch mode works with all normalization types (EBU, RMS, peak).</p> <p>Example: <code>ffmpeg-normalize album/*.flac --batch -nt rms -t -20</code></p> <p>Note: For music albums, RMS or Peak normalization is recommended over EBU. See the FAQ for details.</p>"},{"location":"usage/options/#ebu-r128-normalization","title":"EBU R128 Normalization","text":""},{"location":"usage/options/#-lrt-loudness_range_target-loudness-range-target-loudness_range_target","title":"<code>-lrt LOUDNESS_RANGE_TARGET, --loudness-range-target LOUDNESS_RANGE_TARGET</code>","text":"<p>EBU Loudness Range Target in LUFS (default: 7.0).</p> <p>Range is 1.0 - 50.0.</p>"},{"location":"usage/options/#-keep-loudness-range-target","title":"<code>--keep-loudness-range-target</code>","text":"<p>Keep the input loudness range target to allow for linear normalization.</p>"},{"location":"usage/options/#-keep-lra-above-loudness-range-target","title":"<code>--keep-lra-above-loudness-range-target</code>","text":"<p>Keep input loudness range above loudness range target.</p> <p>Can be used as an alternative to <code>--keep-loudness-range-target</code> to allow for linear normalization.</p>"},{"location":"usage/options/#-tp-true_peak-true-peak-true_peak","title":"<code>-tp TRUE_PEAK, --true-peak TRUE_PEAK</code>","text":"<p>EBU Maximum True Peak in dBTP (default: -2.0).</p> <p>Range is -9.0 - +0.0.</p>"},{"location":"usage/options/#-offset-offset","title":"<code>--offset OFFSET</code>","text":"<p>EBU Offset Gain (default: 0.0).</p> <p>The gain is applied before the true-peak limiter in the first pass only. The offset for the second pass will be automatically determined based on the first pass statistics.</p> <p>Range is -99.0 - +99.0.</p>"},{"location":"usage/options/#-lower-only","title":"<code>--lower-only</code>","text":"<p>Whether the audio should not increase in loudness.</p> <p>If the measured loudness from the first pass is lower than the target loudness then normalization will be skipped for the audio source.</p> <p>This option works with all normalization types:</p> <ul> <li>For EBU normalization, this compares input integrated loudness to the target level.</li> <li>For peak normalization, this compares the input peak level to the target level.</li> <li>For RMS normalization, this compares the input RMS level to the target level.</li> </ul>"},{"location":"usage/options/#-auto-lower-loudness-target","title":"<code>--auto-lower-loudness-target</code>","text":"<p>Automatically lower EBU Integrated Loudness Target.</p> <p>Automatically lower EBU Integrated Loudness Target to prevent falling back to dynamic filtering.</p> <p>Makes sure target loudness is lower than measured loudness minus peak loudness (input_i - input_tp) by a small amount.</p>"},{"location":"usage/options/#-dual-mono","title":"<code>--dual-mono</code>","text":"<p>Treat mono input files as \"dual-mono\".</p> <p>If a mono file is intended for playback on a stereo system, its EBU R128 measurement will be perceptually incorrect. If set, this option will compensate for this effect. Multi-channel input files are not affected by this option.</p>"},{"location":"usage/options/#-dynamic","title":"<code>--dynamic</code>","text":"<p>Force dynamic normalization mode.</p> <p>Instead of applying linear EBU R128 normalization, choose a dynamic normalization. This uses a one-pass algorithm and skips the initial media scan.</p> <p>Dynamic mode will automatically change the sample rate to 192 kHz. Use <code>-ar</code>/<code>--sample-rate</code> to specify a different output sample rate.</p>"},{"location":"usage/options/#audio-encoding","title":"Audio Encoding","text":""},{"location":"usage/options/#-ca-audio_codec-audio-codec-audio_codec","title":"<code>-c:a AUDIO_CODEC, --audio-codec AUDIO_CODEC</code>","text":"<p>Audio codec to use for output files.</p> <p>See <code>ffmpeg -encoders</code> for a list.</p> <p>Will use PCM audio with input stream bit depth by default.</p>"},{"location":"usage/options/#-ba-audio_bitrate-audio-bitrate-audio_bitrate","title":"<code>-b:a AUDIO_BITRATE, --audio-bitrate AUDIO_BITRATE</code>","text":"<p>Audio bitrate in bits/s, or with K suffix.</p> <p>If not specified, will use codec default.</p>"},{"location":"usage/options/#-ar-sample_rate-sample-rate-sample_rate","title":"<code>-ar SAMPLE_RATE, --sample-rate SAMPLE_RATE</code>","text":"<p>Audio sample rate to use for output files in Hz.</p> <p>Will use input sample rate by default, except for EBU normalization, which will change the input sample rate to 192 kHz.</p>"},{"location":"usage/options/#-ac-audio-channels","title":"<code>-ac</code>, <code>--audio-channels</code>","text":"<p>Set the number of audio channels. If not specified, the input channel layout will be used. This is equivalent to <code>-ac</code> in ffmpeg.</p>"},{"location":"usage/options/#-koa-keep-original-audio","title":"<code>-koa, --keep-original-audio</code>","text":"<p>Copy original, non-normalized audio streams to output file</p>"},{"location":"usage/options/#audio-stream-selection","title":"Audio Stream Selection","text":""},{"location":"usage/options/#-as-audio_streams-audio-streams-audio_streams","title":"<code>-as AUDIO_STREAMS, --audio-streams AUDIO_STREAMS</code>","text":"<p>Select specific audio streams to normalize by stream index (comma-separated).</p> <p>Example: <code>-as 1</code> normalizes only stream 1, <code>-as 1,2</code> normalizes streams 1 and 2.</p> <p>If not specified, all audio streams will be normalized (default behavior).</p>"},{"location":"usage/options/#-audio-default-only","title":"<code>--audio-default-only</code>","text":"<p>Only normalize audio streams with the 'default' disposition flag.</p> <p>This is useful for files with multiple audio tracks where only the default track should be normalized (e.g., main audio track vs. commentary tracks).</p>"},{"location":"usage/options/#-keep-other-audio","title":"<code>--keep-other-audio</code>","text":"<p>Keep non-selected audio streams in the output file (copy without normalization).</p> <p>Must be combined with either <code>-as</code>/<code>--audio-streams</code> or <code>--audio-default-only</code>.</p> <p>Example: <code>ffmpeg-normalize input.mkv -as 1 --keep-other-audio</code> will normalize stream 1 and copy all other audio streams unchanged.</p> <p>Note: This option is mutually exclusive with <code>--keep-original-audio</code>. Use <code>--keep-original-audio</code> to keep all original streams alongside normalized ones, or <code>--keep-other-audio</code> to keep only non-selected streams as passthrough.</p>"},{"location":"usage/options/#-prf-pre_filter-pre-filter-pre_filter","title":"<code>-prf PRE_FILTER, --pre-filter PRE_FILTER</code>","text":"<p>Add an audio filter chain before applying normalization.</p> <p>Multiple filters can be specified by comma-separating them.</p>"},{"location":"usage/options/#-pof-post_filter-post-filter-post_filter","title":"<code>-pof POST_FILTER, --post-filter POST_FILTER</code>","text":"<p>Add an audio filter chain after applying normalization.</p> <p>Multiple filters can be specified by comma-separating them.</p> <p>For EBU, the filter will be applied during the second pass.</p>"},{"location":"usage/options/#other-encoding-options","title":"Other Encoding Options","text":""},{"location":"usage/options/#-vn-video-disable","title":"<code>-vn, --video-disable</code>","text":"<p>Do not write video streams to output</p>"},{"location":"usage/options/#-cv-video_codec-video-codec-video_codec","title":"<code>-c:v VIDEO_CODEC, --video-codec VIDEO_CODEC</code>","text":"<p>Video codec to use for output files (default: 'copy').</p> <p>See <code>ffmpeg -encoders</code> for a list.</p> <p>Will attempt to copy video codec by default.</p>"},{"location":"usage/options/#-sn-subtitle-disable","title":"<code>-sn, --subtitle-disable</code>","text":"<p>Do not write subtitle streams to output</p>"},{"location":"usage/options/#-mn-metadata-disable","title":"<code>-mn, --metadata-disable</code>","text":"<p>Do not write metadata to output</p>"},{"location":"usage/options/#-cn-chapters-disable","title":"<code>-cn, --chapters-disable</code>","text":"<p>Do not write chapters to output</p>"},{"location":"usage/options/#inputoutput-format","title":"Input/Output Format","text":""},{"location":"usage/options/#-ei-extra_input_options-extra-input-options-extra_input_options","title":"<code>-ei EXTRA_INPUT_OPTIONS, --extra-input-options EXTRA_INPUT_OPTIONS</code>","text":"<p>Extra input options list.</p> <p>A list of extra ffmpeg command line arguments valid for the input, applied before ffmpeg's <code>-i</code>.</p> <p>You can either use a JSON-formatted list (i.e., a list of comma-separated, quoted elements within square brackets), or a simple string of space-separated arguments.</p> <p>If JSON is used, you need to wrap the whole argument in quotes to prevent shell expansion and to preserve literal quotes inside the string. If a simple string is used, you need to specify the argument with <code>-e=</code>.</p> <p>Examples: <code>-ei '[ \"-f\", \"mpegts\", \"-r\", \"24\" ]'</code> or <code>-ei=\"-f mpegts -r 24\"</code></p>"},{"location":"usage/options/#-e-extra_output_options-extra-output-options-extra_output_options","title":"<code>-e EXTRA_OUTPUT_OPTIONS, --extra-output-options EXTRA_OUTPUT_OPTIONS</code>","text":"<p>Extra output options list.</p> <p>A list of extra ffmpeg command line arguments valid for the output.</p> <p>You can either use a JSON-formatted list (i.e., a list of comma-separated, quoted elements within square brackets), or a simple string of space-separated arguments.</p> <p>If JSON is used, you need to wrap the whole argument in quotes to prevent shell expansion and to preserve literal quotes inside the string. If a simple string is used, you need to specify the argument with <code>-e=</code>.</p> <p>Examples: <code>-e '[ \"-vbr\", \"3\", \"-preset:v\", \"ultrafast\" ]'</code> or <code>-e=\"-vbr 3 -preset:v ultrafast\"</code></p>"},{"location":"usage/options/#-ofmt-output_format-output-format-output_format","title":"<code>-ofmt OUTPUT_FORMAT, --output-format OUTPUT_FORMAT</code>","text":"<p>Media format to use for output file(s).</p> <p>See <code>ffmpeg -formats</code> for a list.</p> <p>If not specified, the format will be inferred by ffmpeg from the output file name. If the output file name is not explicitly specified, the extension will govern the format (see '--extension' option).</p>"},{"location":"usage/options/#-ext-extension-extension-extension","title":"<code>-ext EXTENSION, --extension EXTENSION</code>","text":"<p>Output file extension to use for output files that were not explicitly specified. (Default: <code>mkv</code>)</p>"},{"location":"usage/options/#environment-variables","title":"Environment Variables","text":"<p>The program additionally respects environment variables:</p>"},{"location":"usage/options/#tmp-temp-tmpdir","title":"<code>TMP</code> / <code>TEMP</code> / <code>TMPDIR</code>","text":"<p>Sets the path to the temporary directory in which files are stored before being moved to the final output directory. Note: You need to use full paths.</p>"},{"location":"usage/options/#ffmpeg_path","title":"<code>FFMPEG_PATH</code>","text":"<p>Sets the full path to an <code>ffmpeg</code> executable other than the system default or you can provide a file name available on $PATH</p>"}]}